import ast
import os
import sys

from pathlib import Path
from telethon.tl.custom import Button
from telethon import TelegramClient, events, sync, functions
from telethon.tl.types import InputPeerChannel
from telethon.tl.types import SendMessageTypingAction
from PIL import Image, ImageDraw, ImageFont, ImageColor

from db_tools import _update_current_user_step, _update_user_states, _get_user_states, \
    _get_current_user_step, _create_db, _update_user_topic_words, \
    _get_user_words, _update_user_words, _update_user_choose_topic, \
    _get_user_self_words, _update_user_self_words, _get_user_test_words, _update_user_test_words
from globals import TOPICS, WORDS, TRANSLATES, LIMIT_TIME_EVENTS, LIMIT_USES, LIMIT_LINK_USES, LIMIT_USES_MESSAGES
from ellie import get_response, build_cards_from_text, get_conversations, get_translate

from tools import update_text_from_state_markup, get_keyboard, find_file, is_expected_steps, \
    get_text_from_link, build_img_cards, get_proposal_topics, build_markup, get_state_markup, \
    match_topics_name, get_diff_between_ts, build_list_of_words, build_history_message, send_img, check_exist_img, \
    create_img_card, get_translate_word

from db import is_user_exist_db, update_data_users_db, update_data_topics_db, get_user_topics_db, \
    get_user_words_db, update_user_words_db, get_user_level_db, update_user_level_db, \
    update_messages_db, update_reviews_db, update_data_events_db, get_event_from_db, get_stat_use_message_db, \
    get_stat_use_link_db, get_history_chat_ellie_db, get_stat_use_mode_db, \
    get_private_db, get_user_for_notify_reviews_db, get_last_message_ellie_db, get_num_translates_db

config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'config')
config_path = os.path.abspath(config_path)
sys.path.insert(1, config_path)

import config


api_id = config.app_id
api_hash = config.api_hash
bot_token = config.bot_token
test_user_id = config.test_user_id

PATH_IMAGES = Path(__file__).parent.parent.resolve() / "data" / "images"

bot = TelegramClient("bot", api_id, api_hash).start(bot_token=bot_token)

print(bot)

history_dict = dict()


@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    print(event)
    sender_info = await event.get_sender()
    user_id = event.message.peer_id.user_id
    await _create_db()
    await _update_current_user_step(user_id, 0)
    if not await is_user_exist_db(user_id):
        await update_data_users_db(sender_info)

    keyboard = await get_keyboard(["–ù–∞—á–∞—Ç—å üöÄ", "–û–±–æ –º–Ω–µ üëæ"])
    text = "Hi! üëã\n\n–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! " \
           "–° Wordbi —Ç—ã —Å–º–æ–∂–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–π vocabulary. \n\n–•–æ—Ä–æ—à–∏–π –æ–±—ä–µ–º —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ " \
           "–ø–æ–º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏, —Å–º–æ—Ç—Ä–µ—Ç—å –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ " \
           "–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∑—ã–∫ –≤ –∂–∏–∑–Ω–∏ üòâ"
    await event.client.send_message(event.chat_id, text, buttons=keyboard)
    await update_data_events_db(user_id, "start", {"step": 0})
    return


@bot.on(events.NewMessage(pattern="–ù–∞—á–∞—Ç—å üöÄ"))
async def begin(event):
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [0]):
        await _update_current_user_step(user_id, 1)
        total_topics = list(TOPICS.keys())

        await _update_user_states(user_id, "topics", total_topics)
        await _update_user_states(user_id, "states", ["" for _ in range(len(total_topics))])

        proposal_topics = await match_topics_name(total_topics)
        markup = bot.build_reply_markup(await get_proposal_topics(proposal_topics))

        await get_state_markup(markup, user_id)

        await event.client.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã üê•\n\n"
                                                       "–Ø –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–ª–æ–≤ –¥–ª—è "
                                                       "—Ç–µ–±—è, –∞ Ellie AI –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —É—á–µ—Å—Ç—å —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ "
                                                       "–æ–±—â–µ–Ω–∏–∏ —Å –Ω–µ–π üíú", buttons=markup)
        keyboard = await get_keyboard(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–∞–∑–∞–¥"])
        await event.client.send_message(event.sender_id, "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å —Å –≤—ã–±–æ—Ä–æ–º, –∂–º–∏ –Ω–∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!",
                                        buttons=keyboard)
        await update_data_events_db(user_id, "begin", {"step": 1})
    elif await is_expected_steps(user_id, [2]):
        await _update_current_user_step(user_id, 1)

        current_topics = await _get_user_states(user_id, "topics")
        current_state = await _get_user_states(user_id, "states")
        current_topics = await match_topics_name(current_topics)

        markup = bot.build_reply_markup(await get_proposal_topics(current_topics, current_state))
        await get_state_markup(markup, user_id)

        await event.client.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã üê•\n\n"
                                                       "–Ø –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–ª–æ–≤ –¥–ª—è "
                                                       "—Ç–µ–±—è, –∞ Ellie AI –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —É—á–µ—Å—Ç—å —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ "
                                                       "–æ–±—â–µ–Ω–∏–∏ —Å –Ω–µ–π üíú", buttons=markup)
        keyboard = await get_keyboard(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–∞–∑–∞–¥"])
        await event.client.send_message(event.sender_id, "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å —Å –≤—ã–±–æ—Ä–æ–º, –∂–º–∏ –Ω–∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!",
                                        buttons=keyboard)
        await update_data_events_db(user_id, "begin", {"step": 2})
    else:
        pass
    return


@bot.on(events.CallbackQuery())
async def handler(event):
    user_id = event.original_update.user_id
    step = await _get_current_user_step(user_id)

    async def process_refresh(event, user_id):
        state = await _get_user_words(user_id)
        current_topic = state[0][0]
        current_word = state[0][1]
        current_lang = state[0][2]

        buttons = [
            [
                Button.inline(text="‚¨ÖÔ∏è", data=-1),
                Button.inline(text="üîÑ", data=0),
                Button.inline(text="‚û°Ô∏è", data=1),
            ],
        ]

        user_self_words = await _get_user_self_words(user_id)

        if current_lang == "ru":
            lang = "en"
        else:
            lang = "ru"

        if lang == "ru":
            try:
                current_word_new = await get_translate_word(word=current_word, from_lang="en")
            except:
                current_word_new = next((v for k, v in user_self_words.items() if k.lower() == current_word.lower()), None)
        else:
            current_word_new = current_word

        await send_img(
            event=event,
            buttons=buttons,
            file_name=f"{current_word.replace(' ', '')}_{lang}.png",
            current_word=current_word_new,
            lang=lang,
            type_action="edit"
        )

        await _update_user_words(user_id, "sport", current_word, lang)
        await update_data_events_db(user_id, "refresh_card", {"step": step})
        return

    async def process_forward(event, user_id):
        if await is_expected_steps(user_id, [50]):
            words_list = await get_user_words_db(user_id)

            words_list = words_list[0]
            state = await _get_user_words(user_id)
            current_word = state[0][1].lower()
            new_current_word = current_word
        else:
            state = await _get_user_words(user_id)
            current_word = state[0][1]

            words_list = await _get_user_self_words(user_id)
            new_current_word = current_word

        for i in range(len(words_list) - 1):
            if words_list[i].lower() == current_word.lower():
                new_current_word = words_list[i + 1].lower()

        if new_current_word == current_word:
            buttons = [
                [
                    Button.inline(text="‚¨ÖÔ∏è", data=-1),
                    Button.inline(text="üîÑ", data=0),
                ],
            ]
            await send_img(
                event=event,
                buttons=buttons,
                file_name=f"{current_word.replace(' ', '')}_en.png",
                current_word=current_word,
                lang="en",
                type_action="edit"
            )

            keyboard = await get_keyboard(["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
            text = "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Ö –ª–∏—Å—Ç–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å, " \
                   "–∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†\n"
            await event.client.send_message(event.chat_id, text, buttons=keyboard)
            await update_data_events_db(user_id, "complete_card", {"step": -1})

        else:
            current_word = new_current_word
            buttons = [
                [
                    Button.inline(text="‚¨ÖÔ∏è", data=-1),
                    Button.inline(text="üîÑ", data=0),
                    Button.inline(text="‚û°Ô∏è", data=1),
                ],
            ]
            await send_img(
                event=event,
                buttons=buttons,
                file_name=f"{current_word.replace(' ', '')}_en.png",
                current_word=current_word,
                lang="en",
                type_action="edit"
            )

            await _update_user_words(user_id, "sport", current_word, "en")
            await update_data_events_db(user_id, "forward_card", {"step": step})
        return

    async def process_backward(event, user_id):
        if await is_expected_steps(user_id, [50]):
            words_list = await get_user_words_db(user_id)
            words_list = words_list[0]
            state = await _get_user_words(user_id)
            current_word = state[0][1]
            current_word = current_word.lower()
            new_current_word = current_word
        else:
            state = await _get_user_words(user_id)
            current_word = state[0][1]
            words_list = await _get_user_self_words(user_id)
            new_current_word = current_word

        for i in range(1, len(words_list)):
            if words_list[i].lower() == current_word.lower():
                new_current_word = words_list[i - 1].lower()
        if new_current_word == current_word:
            buttons = [
                [
                    Button.inline(text="üîÑ", data=0),
                    Button.inline(text="‚û°Ô∏è", data=1),
                ],
            ]
            await send_img(
                event=event,
                buttons=buttons,
                file_name=f"{current_word.replace(' ', '')}_en.png",
                current_word=current_word,
                lang="en",
                type_action="edit"
            )

            await update_data_events_db(user_id, "backward_card_first", {"step": step})
        else:
            current_word = new_current_word

            buttons = [
                [
                    Button.inline(text="‚¨ÖÔ∏è", data=-1),
                    Button.inline(text="üîÑ", data=0),
                    Button.inline(text="‚û°Ô∏è", data=1),
                ],
            ]
            await send_img(
                event=event,
                buttons=buttons,
                file_name=f"{current_word.replace(' ', '')}_en.png",
                current_word=current_word,
                lang="en",
                type_action="edit"
            )

            await _update_user_words(user_id, "sport", current_word, "en")
            await update_data_events_db(user_id, "backward_card", {"step": step})
        return

    async def gather_user_states(user_id):
        current_topics = await _get_user_states(user_id, "topics")
        current_state = await _get_user_states(user_id, "states")
        current_topics = await match_topics_name(current_topics)
        return current_topics, current_state

    async def process_button_click(event, user_id, data_filter):
        if data_filter == "üîÑ":
            await process_refresh(event, user_id)
        elif data_filter in ["‚û°Ô∏è", "1"]:
            await process_forward(event, user_id)
        elif data_filter in ["‚¨ÖÔ∏è", "-1"]:
            await process_backward(event, user_id)

    async def handle_expected_steps_6_1(event, user_id):
        current_topics, current_state = await gather_user_states(user_id)
        topic_clicked = event.data.split(b'$')[0].decode("utf-8")

        markup = bot.build_reply_markup(await build_markup(current_topics, current_state))
        await update_text_from_state_markup(markup, current_state, current_topics, topic_clicked)
        await get_state_markup(markup, user_id)
        await event.client.edit_message(event.sender_id, event.message_id, buttons=markup)

    async def handle_expected_step_9(event, user_id):
        data_filter = event.data.decode("utf-8")

        if data_filter in ["üîÑ", "‚û°Ô∏è", "1", "‚¨ÖÔ∏è", "-1"]:
            await process_button_click(event, user_id, data_filter)

    async def get_cards(event):
        data_filter = event.data.decode("utf-8")

        if data_filter == "10":
            await get_start_cards(event)
        else:
            user_words = await get_user_words_db(user_id)
            user_words = user_words[0]
            if user_words:
                await _update_current_user_step(user_id, 901)
                await get_start_cards(event)
            else:
                text = "–ö–∞–∂–µ—Ç—Å—è, –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ. –î–æ–±–∞–≤–∏–º?"
                keyboard = await get_keyboard(["–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                await event.client.send_message(event.chat_id, text, buttons=keyboard)

    if await is_expected_steps(user_id, [1, 2]):
        await handle_expected_steps_6_1(event, user_id)
    elif await is_expected_steps(user_id, [51, 501, 50]):
        await handle_expected_step_9(event, user_id)
    elif await is_expected_steps(user_id, [545]):
        await get_cards(event)
    elif await is_expected_steps(user_id, [2011, 2010]):
        data_filter = event.data.decode("utf-8")
        if data_filter == "56":
            if await is_expected_steps(user_id, [2010]):
                await _update_current_user_step(user_id, 3010)
                await testing_words(event)
            elif await is_expected_steps(user_id, [2011]):
                await _update_current_user_step(user_id, 3011)
                await testing_words(event)
    elif await is_expected_steps(user_id, [61, 62]):
        data_filter = event.data.decode("utf-8")
        if data_filter == "49":
            last_message = await get_last_message_ellie_db(user_id)
            await update_data_events_db(user_id, "translate_message", {"step": step})
            if last_message:
                last_message = last_message[0]
                translated_text = await get_translate(user_id, last_message)
                num_translates = await get_num_translates_db(user_id)

                if num_translates is None or num_translates == 0:
                    translated_text += ">\n\n–°—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ! –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ " \
                                       "–∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–∞–≤—ã–∫ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Å–¥–µ–ª–∞–µ—Ç –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–ª–æ–≤ ü§ì"
                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                await event.client.send_message(event.chat_id, "<" + translated_text + ">", buttons=keyboard)
                await update_data_events_db(user_id, "translate_message_success", {"step": step})


@bot.on(events.NewMessage(pattern="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
async def confirmed(event):
    user_id = event.message.peer_id.user_id
    if await is_expected_steps(user_id, [1, 2, 3]):
        step = await _get_current_user_step(user_id)
        await _update_current_user_step(user_id, 2)
        current_topics = await _get_user_states(user_id, "topics")
        current_states = await _get_user_states(user_id, "states")

        chooses_topic = list()

        for state, topic in zip(current_states, current_topics):
            if state != "":
                chooses_topic.append(topic)

        if len(chooses_topic) != 0:
            await update_data_topics_db(user_id, chooses_topic)

            keyboard = await get_keyboard(["A1-A2: Beginner üí´", "B1-B2: Intermediate ‚≠êÔ∏è", "C1-C2: Advanced üåü", "–ù–∞–∑–∞–¥"])
            text = "–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ üìö\n\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ " \
                   "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É —Å–ª–æ–≤ –¥–ª—è —Ç–µ–±—è ü´∂"
            await event.client.send_message(event.chat_id, text, buttons=keyboard)
            await update_data_events_db(user_id, "success", {"step": step})
            await _update_user_choose_topic(user_id, sorted(chooses_topic))

        else:
            text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã..ü¶¶"
            keyboard = await get_keyboard(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"])
            await event.client.send_message(event.chat_id, text, buttons=keyboard)
            await update_data_events_db(user_id, "success", {"step": step, "error": "no_topics"})
    else:
        pass
    return


async def filter_levels(event):
    """"""
    user_id = event.message.peer_id.user_id

    if event.message.message in ("A1-A2: Beginner üí´", "B1-B2: Intermediate ‚≠êÔ∏è", "C1-C2: Advanced üåü"):
        await update_user_level_db(user_id, event.message.message)
        return True
    else:
        return False


@bot.on(events.NewMessage(func=filter_levels))
async def choose_level(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [2, 41, 42]):
        await _update_current_user_step(user_id, 3)
        keyboard = await get_keyboard(["–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ üß©", "–ß–∞—Ç —Å Ellie üí¨", "–ù–∞–∑–∞–¥"])
        text = "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤:\n\n1Ô∏è‚É£ –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ üß©: –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è —Å–ø–∏—Å–æ–∫ " \
               "—Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞ –∏–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ–∏ " \
               "–∏–Ω—Ç–µ—Ä–µ—Å—ã, –∞ —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–æ–∫ " \
               "—Å–ª–æ–≤. –¢–æ–≥–¥–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –ø–æ —Ç–≤–æ–∏–º –ª—é–±–∏–º—ã–º —Ç–µ–º–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n\n2Ô∏è‚É£ –ß–∞—Ç —Å Ellie AI üí¨: —Å " \
               "–Ω–µ–π –º–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É Quiz me –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å üôÇ"
        await event.client.send_message(event.sender_id, text,
                                        buttons=keyboard)
        await update_data_events_db(user_id, "choose_level", {"step": step, "level": event.message.message})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ üß©"))
async def cards(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [3, 51, 52, 9]):
        await _update_current_user_step(user_id, 41)
        keyboard = await get_keyboard([
            "–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ üëæ",
            "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ üß¨",
            "–ù–∞–∑–∞–¥"
        ])
        text = "–°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤? \n\n" \
               "üëæ –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ - —è —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–ª\n" \
               "üß¨ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ - –≤ —ç—Ç–æ–º " \
               "—Ä–µ–∂–∏–º–µ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ –ø—Ä–∏—à–ª–µ—à—å ü§ì\n\n"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "cards", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ üëæ"))
async def get_start_cards(event):
    try:
        user_id = event.message.peer_id.user_id
    except:
        user_id = event.original_update.user_id

    step = await _get_current_user_step(user_id)
    print("step", step)

    if await is_expected_steps(user_id, [41, 101, 501, 901, 545]):
        print("if await is_expected_steps(user_id, [41, 101, 501, 901, 545])")

        topics = await get_user_topics_db(user_id)
        user_level = await get_user_level_db(user_id)

        if await is_expected_steps(user_id, [901]):
            words_list = await get_user_words_db(user_id)
            words_list = words_list[0]
            await _update_current_user_step(user_id, 50)
            current_word = words_list[0].lower()

        else:
            print("words_list = await build_list_of_words(topics, user_level)")
            words_list = await build_list_of_words(topics, user_level)
            await _update_user_self_words(user_id, words_list)
            current_word = (words_list[0]).lower()
            await _update_current_user_step(user_id, 51)
        print("word_list", words_list, current_word)

        buttons = [
            [
                Button.inline(text="‚¨ÖÔ∏è", data=-1),
                Button.inline("üîÑ", data=0),
                Button.inline("‚û°Ô∏è", data=1),
            ],
        ]

        keyboard = await get_keyboard(["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
        text = "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –¥–ª—è —Ç–µ–±—è –Ω–∞–±–æ—Ä —Å–ª–æ–≤, –Ω–∞—á–Ω–µ–º? ‚òÑÔ∏è\n\n" \
               "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏?\n\n" \
               "‚û°Ô∏è - –ª–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä–µ–¥\nüîÑ - –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (–ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥)\n‚¨ÖÔ∏è - –ª–∏—Å—Ç–∞—Ç—å –Ω–∞–∑–∞–¥\n\n" \
               "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—èüß† - –Ω–∞–∂–∏–º–∞–π, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!\n\n" \
               "–ê –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–µ—à—å –∏–ª–∏ –Ω–∞–¥–æ–µ—Å—Ç, –º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–≤–µ—Ä—à–∏—Ç—å\n\n"

        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await send_img(
            event=event,
            buttons=buttons,
            file_name=f"{current_word.replace(' ', '')}_en.png",
            current_word=current_word,
            lang="en",
            type_action="send"
        )

        await _update_user_words(user_id, "sport", current_word, "en")
        await update_data_events_db(user_id, "cards_interests", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ üß¨"))
async def create_self_words(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [41, 545]):
        await _update_current_user_step(user_id, 52)

        text = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–±–æ–π —Ç–µ–º–∞–º. " \
               "–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ —Ç–æ–∂–µ —É—á—Ç—É ü§ó\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: IT, –•–∏–º–∏—è –∏–ª–∏ –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ\n\n" \
               ""

        await event.client.send_message(event.chat_id, text, buttons=Button.clear())
        await update_data_events_db(user_id, "create_words", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–ß–∞—Ç —Å Ellie üí¨"))
async def start_chat(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [3, 6, 9]):
        await _update_current_user_step(user_id, 42)
        keyboard = await get_keyboard(["Quiz me üìù", "–ü–æ–±–æ–ª—Ç–∞—Ç—å üíå", "–ù–∞–∑–∞–¥"])
        text = "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤:\n\nQuiz me üìù - –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ Ellie AI –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É —Ç–µ–±—è –∑–Ω–∞—á–µ–Ω–∏—è " \
               "—Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –∞ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –æ–±—ä—è—Å–Ω–∏—Ç—å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞ " \
               "–∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ–Ω–µ—á–Ω–æ –∂–µ üòè\n\n–ê –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å Ellie AI, —Ç–æ –≤—ã–±–∏—Ä–∞–π —Ä–µ–∂–∏–º –ü–æ–±–æ–ª—Ç–∞—Ç—å üíå\n" \
               "Ellie —É—á—Ç–µ—Ç —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ üòâ"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "chat", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="Quiz me üìù"))
async def get_begin(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    cnt_uses = await get_stat_use_mode_db(user_id)
    if cnt_uses < LIMIT_USES or cnt_uses is None or user_id == test_user_id:
        if await is_expected_steps(user_id, [42]):
            await _update_current_user_step(user_id, 61)
            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])

            level = await get_user_level_db(user_id)
            words_list = await _get_user_self_words(user_id)

            async with event.client.action(user_id, "typing"):
                text = await get_response(user_id=user_id, history="", message="", words=words_list, level=level)
                print("text", text)

            buttons = [
                [
                    Button.inline(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", data=49),
                ],
            ]
            await event.client.send_message(event.chat_id, text, buttons=buttons, reply_to=event.message.id)
            await update_messages_db(user_id, "quiz", "ellie", "user", text.replace("'", ""))
            await update_data_events_db(user_id, "quiz_me", {"step": step})
        else:
            pass
    else:
        await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üôÇ")
        await update_data_events_db(user_id, "quiz_me_error", {"step": -1, "error": "limit"})
    return


@bot.on(events.NewMessage(pattern="–ü–æ–±–æ–ª—Ç–∞—Ç—å üíå"))
async def get_begin(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)
    last_ts_event = await get_event_from_db(user_id, "talking")
    if last_ts_event is None or await get_diff_between_ts(str(last_ts_event)) > LIMIT_TIME_EVENTS:
        cnt_uses = await get_stat_use_mode_db(user_id)
        if cnt_uses < LIMIT_USES or cnt_uses is None or user_id == test_user_id:
            if await is_expected_steps(user_id, [42]):
                await _update_current_user_step(user_id, 62)
                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])

                topics = await get_user_topics_db(user_id)
                level = await get_user_level_db(user_id)
                words_list = await _get_user_self_words(user_id)

                async with event.client.action(user_id, "typing"):
                    text = await get_conversations(user_id=user_id, history="",
                                                   message="", words=words_list, topics=topics, level=level)
                buttons = [
                    [
                        Button.inline(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", data=49),
                    ],
                ]
                await event.client.send_message(event.chat_id, text, buttons=buttons, reply_to=event.message.id)
                await update_messages_db(user_id, "conversation", "ellie", "user", text.replace("'", ""))
                await update_data_events_db(user_id, "talking", {"step": step})
            else:
                pass
        else:
            await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üôÇ")
            await update_data_events_db(user_id, "conversation_error", {"step": -1, "error": "limit"})
    else:
        await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n–ü–æ–ø—Ä–æ–±—É–π "
                                                       "—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üôÇ")
        await update_data_events_db(user_id, "talking", {"step": step, "error": "flood"})
    return


@bot.on(events.NewMessage())
async def get_begin(event):
    user_id = event.message.peer_id.user_id
    if await is_expected_steps(user_id, [61, 62]) and event.message.message not in ("Quiz me üìù", "–ü–æ–±–æ–ª—Ç–∞—Ç—å üíå",
                                                                                    "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†",
                                                                                    "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ üß¨"):
        if event.message.message not in ("/start", "/my_cards", "/interests", "/level", "/reviews"):
            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])

            topics = await get_user_topics_db(user_id)
            level = await get_user_level_db(user_id)
            words_list = await _get_user_self_words(user_id)

            last_ts_event_quiz = await get_event_from_db(user_id, "message_from_user_quiz")
            last_ts_event_conv = await get_event_from_db(user_id, "message_from_user_conv")
            if last_ts_event_quiz is None or await get_diff_between_ts(str(last_ts_event_quiz)) > LIMIT_TIME_EVENTS or \
                    last_ts_event_conv is None or await get_diff_between_ts(str(last_ts_event_conv)) > LIMIT_TIME_EVENTS \
                    or user_id == test_user_id:

                cnt_uses = await get_stat_use_message_db(user_id)
                if cnt_uses < LIMIT_USES_MESSAGES or cnt_uses is None or user_id == test_user_id:
                    if await is_expected_steps(user_id, [61]):
                        await update_messages_db(user_id, "quiz", "user", "ellie", (event.message.message).replace("'", ""))
                        await update_data_events_db(user_id, "message_from_user_quiz", {"step": -1})
                        messages_history = await get_history_chat_ellie_db(user_id, "quiz")
                        if not messages_history:
                            messages_history = []
                        else:
                            messages_history = await build_history_message(messages_history)
                        async with event.client.action(user_id, "typing"):

                            text = await get_response(user_id=user_id, history=messages_history,
                                                      message=event.message.message, words=words_list, level=level)
                            if text:
                                await update_messages_db(user_id, "quiz", "ellie", "user", text.replace("'", ""))
                                buttons = [
                                    [
                                        Button.inline(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", data=49),
                                    ],
                                ]
                                await event.client.send_message(event.chat_id, text, reply_to=event.message.id, buttons=buttons)
                                await update_data_events_db(user_id, "message_to_user_quiz", {"step": -1})
                            else:
                                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                                text = "–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å üò£\n\n–£–∂–µ —á–∏–Ω–∏–º, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"
                                await event.client.send_message(event.chat_id, text, buttons=keyboard)
                    else:
                        await update_messages_db(user_id, "conversation", "user", "ellie", event.message.message)
                        await update_data_events_db(user_id, "message_from_user_conv", {"step": -1})
                        messages_history = await get_history_chat_ellie_db(user_id, "conversation")
                        if not messages_history:
                            messages_history = []
                        else:
                            messages_history = await build_history_message(messages_history)
                        async with event.client.action(user_id, "typing"):
                            text = await get_conversations(user_id=user_id, history=messages_history,
                                                           message=event.message.message, words=words_list, topics=topics,
                                                           level=level)
                            if text:
                                await update_messages_db(user_id, "conversation", "ellie", "user", text.replace("'", ""))
                                buttons = [
                                    [
                                        Button.inline(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", data=49),
                                    ],
                                ]
                                await event.client.send_message(event.chat_id, text, reply_to=event.message.id, buttons=buttons)
                                await update_data_events_db(user_id, "message_to_user_conv", {"step": -1})
                            else:
                                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                                text = "–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å üò£\n\n–£–∂–µ —á–∏–Ω–∏–º, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"
                                await event.client.send_message(event.chat_id, text, buttons=keyboard)
                else:
                    await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üôÇ")
                    await update_data_events_db(user_id, "message_from_user_error", {"step": -1, "error": "limit"})
            else:
                await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n–ü–æ–ø—Ä–æ–±—É–π "
                                                               "—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üôÇ")
                await update_data_events_db(user_id, "message_from_user_error", {"step": -1, "error": "flood"})
        else:
            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
            text = "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å Ellie –ø–æ –∫–Ω–æ–ø–∫–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å üôÇ"
            await event.client.send_message(event.chat_id, text, reply_to=event.message.id, buttons=keyboard)

    elif await is_expected_steps(user_id, [2011]) and event.message.message not in ("Quiz me üìù", "–ü–æ–±–æ–ª—Ç–∞—Ç—å üíå",
                                                                                    "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†",
                                                                                    "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ üß¨"):
        if event.message.message not in ("/start", "/my_cards", "/interests", "/level", "/reviews"):
            cur_test_word = await _get_user_test_words(user_id)
            user_words = await get_user_words_db(user_id)
            user_words_en = user_words[0]
            user_words_ru = user_words[1]
            words_test = dict()
            for en, ru in zip(user_words_en, user_words_ru):
                words_test[en.lower()] = ru.lower()

            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
            if words_test[cur_test_word.lower()] == event.message.message.lower():
                await event.client.send_message(event.chat_id, "–ò–∏–∏..–≤–µ—Ä–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å ü¶æ", reply_to=event.message.id, buttons=keyboard)
                await update_data_events_db(user_id, "testing_success",
                                            {"step": -1, "word": event.message.message.lower()})
                await _update_current_user_step(user_id, 3011)
                await testing_words(event)
            else:
                buttons = [
                    [
                        Button.inline(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=56),
                    ],
                ]
                await event.client.send_message(event.chat_id, "–ù–µ–≤–µ—Ä–Ω–æ üôÅ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_to=event.message.id,
                                                buttons=buttons)
                await update_data_events_db(user_id, "testing_failed",
                                            {"step": -1, "word": event.message.message.lower()})
        else:
            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
            text = "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–±—è –ø–æ –∫–Ω–æ–ø–∫–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å üôÇ"
            await event.client.send_message(event.chat_id, text, reply_to=event.message.id, buttons=keyboard)
    elif await is_expected_steps(user_id, [2010]) and event.message.message not in ("Quiz me üìù", "–ü–æ–±–æ–ª—Ç–∞—Ç—å üíå",
                                                                                    "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†",
                                                                                    "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ üß¨"):
        if event.message.message not in ("/start", "/my_cards", "/interests", "/level", "/reviews"):
            cur_test_word = await _get_user_test_words(user_id)
            user_words_en = await _get_user_self_words(user_id)
            user_words_ru = [TRANSLATES[i] for i in user_words_en]
            words_test = dict()

            for en, ru in zip(user_words_en, user_words_ru):
                words_test[en.lower()] = ru.lower()
            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])

            if words_test[cur_test_word.lower()] == event.message.message.lower():
                await event.client.send_message(event.chat_id, "–ò–∏–∏..–≤–µ—Ä–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å ü¶æ", reply_to=event.message.id, buttons=keyboard)
                await update_data_events_db(user_id, "testing_success", {"step": -1, "word": event.message.message.lower()})
                await _update_current_user_step(user_id, 3010)
                await testing_words(event)
            else:
                buttons = [
                    [
                        Button.inline(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=56),
                    ],
                ]
                await event.client.send_message(event.chat_id, "–ù–µ–≤–µ—Ä–Ω–æ üôÅ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_to=event.message.id,
                                                buttons=buttons)
                await update_data_events_db(user_id, "testing_failed",
                                            {"step": -1, "word": event.message.message.lower()})
        else:
            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
            text = "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–±—è –ø–æ –∫–Ω–æ–ø–∫–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å üôÇ"
            await event.client.send_message(event.chat_id, text, reply_to=event.message.id, buttons=keyboard)
    elif await is_expected_steps(user_id, [10]) and event.message.message not in ("–ù–∞–∑–∞–¥", "/reviews", "/interests",
                                                                                  "/level", "/my_cards", "/start"):
        await _update_current_user_step(user_id, 676)
        await update_reviews_db(user_id, event.message.message)
        buttons = [
            [
                Button.url(text="–û—Å—Ç–∞–≤–∏—Ç—å email", url="https://wordbi.com/#subscribe"),
            ],
        ]
        text = "–°–ø–∞—Å–∏–±–æ! –ê –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–≤—ã—Ö, " \
               "—Ç–æ –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π email –≤–æ—Ç —Ç—É—Ç: https://wordbi.com/#subscribe"
        await event.client.send_message(event.chat_id, text, buttons=buttons)
        await update_data_events_db(user_id, "success_review", {"step": -1})

    elif await is_expected_steps(user_id, [52]) and event.message.message not in ("Quiz me üìù", "–ü–æ–±–æ–ª—Ç–∞—Ç—å üíå",
                                                                                    "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†",
                                                                                    "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ üß¨"):
        last_ts_event = await get_event_from_db(user_id, "message_from_user_conv")
        if last_ts_event is None or await get_diff_between_ts(str(last_ts_event)) > 100:
            cnt_uses = await get_stat_use_link_db(user_id)
            if cnt_uses < LIMIT_LINK_USES or cnt_uses is None or user_id == test_user_id:
                await event.client.send_message(event.chat_id, "–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤..",
                                                reply_to=event.message.id, buttons=Button.clear())
                try:
                    topics = event.message.message
                    level = await get_user_level_db(user_id)
                    card_words = await build_cards_from_text(topics, level, user_id)
                    if not card_words:
                        keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                        text = "–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å üò£\n\n–£–∂–µ —á–∏–Ω–∏–º, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"
                        await event.client.send_message(event.chat_id, text, buttons=keyboard)
                    elif card_words == "None":
                        keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                        await event.client.send_message(event.chat_id,
                                                        "–ö–∞–∂–µ—Ç—Å—è, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã üòî\n\n"
                                                        "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã üíú",
                                                        buttons=keyboard)
                        await update_data_events_db(user_id, "cards_from_link_error", {"step": -1,
                                                                                       "error": "specific"})
                    else:
                        card_words = ast.literal_eval(card_words)
                        if not isinstance(card_words, dict):
                            keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                            await event.client.send_message(event.chat_id, "–£–ø—Å..–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. "
                                                                           "–ú–µ–Ω—è —É–∂–µ —á–∏–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–ø–æ–∑–∂–µ üíú",
                                                            buttons=keyboard)
                        else:
                            await _update_user_self_words(user_id, card_words)
                            fixed_card_words = dict()
                            for word, translate in card_words.items():
                                fixed_card_words[word.replace('/', '')] = translate.replace('/', '')
                            await build_img_cards(fixed_card_words)
                            keyboard = await get_keyboard(["–£–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ üíú"])
                            await _update_user_words(user_id, "self", "", "en")
                            await _update_user_choose_topic(user_id, "self")
                            await update_user_words_db(user_id, fixed_card_words, event.message.message)
                            await event.client.send_message(event.chat_id, "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏, –∂–º—è–∫–∞–π –Ω–∞ "
                                                                           "–£–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ üíú",
                                                            buttons=keyboard)
                            await update_data_events_db(user_id, "cards_from_link_success", {"step": -1})
                            await _update_current_user_step(user_id, 101)
                except Exception:
                    keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                    await event.client.send_message(event.chat_id, "–£–ø—Å..–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. "
                                                                   "–ú–µ–Ω—è —É–∂–µ —á–∏–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–ø–æ–∑–∂–µ üíú",
                                                    buttons=keyboard)
                    await update_data_events_db(user_id, "cards_from_link_error",
                                                {"step": -1, "error": "api"})
            else:
                await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üôÇ")
                await update_data_events_db(user_id, "cards_from_link_error", {"step": -1, "error": "limit"})
        else:
            await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n–ü–æ–ø—Ä–æ–±—É–π "
                                                           "—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üôÇ")
            await update_data_events_db(user_id, "cards_from_link_error", {"step": -1, "error": "flood"})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–ó–∞–≤–µ—Ä—à–∏—Ç—å"))
async def get_end(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [52, 101, 61, 62, 51, 41, 2011, 3011, 2010, 3010, 901, 10, 50, 676, 10]):
        await _update_current_user_step(user_id, 7)
        keyboard = await get_keyboard(["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º ‚öôÔ∏è", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå"])
        text = "–•–æ—Ä–æ—à–æ! –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–ª–æ–≤, –≤—ã–±–µ—Ä–∏ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É /my_cards üôÉ\n\n" \
               "–ê –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíú"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "complete", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–£–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ üíú"))
async def get_begin(event):
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [101]):
        await _update_current_user_step(user_id, 901)
        await get_start_cards(event)
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†"))
async def testing_words(event):

    async def send_test_word_message(word, step, additional_buttons=[]):
        message_content = "–£—Ä–∞! –≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ, —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üòª\n\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å" \
            if word is None else ""
        if word:
            if await check_exist_img(f"/{PATH_IMAGES}/{word.replace(' ', '')}_en.png"):
                image_file = f"/{PATH_IMAGES}/{word.replace(' ', '')}_en.png"
            else:
                await create_img_card(word.replace(' ', '').lower(), f"/{PATH_IMAGES}/{word.replace(' ', '')}_en.png")
                image_file = f"/{PATH_IMAGES}/{word.replace(' ', '')}_en.png"
        else:
            image_file = None

        if word is not None:
            buttons = [
                [
                    Button.inline(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=56),
                ],
            ]
        else:
            buttons = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
            await update_data_events_db(user_id, "testing_complete", {"step": -1})

        await event.client.send_message(event.chat_id, message_content, buttons=buttons, file=image_file)
        if word is not None:
            await _update_user_test_words(user_id, word)
        await _update_current_user_step(user_id, step)

    def get_next_test_word(current_word, words_list):
        if current_word in words_list:
            index = words_list.index(current_word)
            return words_list[index + 1] if index + 1 < len(words_list) else None
        return words_list[0]

    try:
        user_id = event.message.peer_id.user_id
    except AttributeError:
        user_id = event.original_update.user_id

    steps_to_categories = [50, 51, 3011, 2011, 3010, 2010, 51, 2010, 3010]

    current_step = await is_expected_steps(user_id, steps_to_categories)
    if current_step:
        step = await _get_current_user_step(user_id)
        if step in [50, 2011, 3011]:
            words_list = await get_user_words_db(user_id)
            words_list = words_list[0]
        else:
            words_list = await _get_user_self_words(user_id)
        cur_test_word = await _get_user_test_words(user_id)

        if not await is_expected_steps(user_id, [3011, 3010]):
            text = "–ê —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–±—è! üòà \n\n–Ø –±—É–¥—É —Ç–µ–±–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ —Ç–≤–æ—è " \
                   "–∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã " \
                   "–∫–∞—Ä—Ç–æ—á–∫–∏ üòä\n\n" \
                   "–ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å —Å–ª–æ–≤–æ, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n" \
                   "–ê –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–µ—à—å –∏–ª–∏ –Ω–∞–¥–æ–µ—Å—Ç, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –ø–Ω–æ–ø–∫—É –ó–∞–≤–µ—Ä—à–∏—Ç—å"
            await event.client.send_message(event.chat_id, text, buttons=await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
            new_cur_test_word = words_list[0]
        else:
            new_cur_test_word = get_next_test_word(cur_test_word, words_list)

        step_update = 2011 if step in [50, 2011, 3011] else 2010
        await send_test_word_message(new_cur_test_word, step_update, [])
        await update_data_events_db(user_id, "testing", {"step": step})


@bot.on(events.NewMessage(pattern="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º ‚öôÔ∏è"))
async def get_begin(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [7]):
        await _update_current_user_step(user_id, 9)
        keyboard = await get_keyboard(["–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ üß©", "–ß–∞—Ç —Å Ellie üí¨"])
        text = "–ü–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? üòè"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "other_mode", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå"))
async def leave_feedback(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [7, 8, 898]):
        await _update_current_user_step(user_id, 10)
        keyboard = await get_keyboard(["–ù–∞–∑–∞–¥"])
        text = "–ë—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥, –µ—Å–ª–∏ –ø–æ–¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º! –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üíú"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "leave_feedback", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="–û–±–æ –º–Ω–µ üëæ"))
async def about_me(event):
    user_id = event.message.peer_id.user_id
    step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [0]):
        await _update_current_user_step(user_id, 11)

        keyboard = await get_keyboard(["–ù–∞–∑–∞–¥"])
        text = "–•—ç–π!\n\n–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å —Ü–µ–ª—å—é –ø–æ–º–æ—á—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å. \n\n" \
               "–í–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ –∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å Ellie AI, " \
               "–∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–µ–π –æ—Ç Open AI üëæ"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "about_me", {"step": step})
    else:
        pass
    return


@bot.on(events.NewMessage(pattern="/my_cards"))
async def get_my_cards(event):
    user_id = event.message.peer_id.user_id
    if not await is_expected_steps(user_id, [3011, 3010, 2011, 2010, 61, 62]):
        step = await _get_current_user_step(user_id)
        await _update_current_user_step(user_id, 545)

        text = "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—åü§ó\n\n"

        buttons = [
            [
                Button.inline(text="–ü–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", data=10),
                Button.inline(text="–ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", data=11),
            ],
        ]

        await event.client.send_message(event.chat_id, text, buttons=buttons)

        text = "‚ñ™Ô∏è –ü–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º - –∫–∞—Ä—Ç–æ—á–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n" \
               "‚ñ™Ô∏è –ò–∑ —Å—Å—ã–ª–∫–∏ - –∫–∞—Ä—Ç–æ—á–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏"
        await event.client.send_message(event.chat_id, text, buttons=Button.clear())

        await update_data_events_db(user_id, "my_cards", {"step": step})
    else:
        pass

    return


async def get_code_fill_form(user_id):
    """Returns a specific user data availability code"""

    user_topics = await get_user_topics_db(user_id)
    user_exist = await is_user_exist_db(user_id)
    user_level = await get_user_level_db(user_id)
    if not user_exist:
        return -1
    elif not user_topics:
        return -2
    elif not user_level:
        return -3
    else:
        return 0


@bot.on(events.NewMessage(pattern="/interests"))
async def get_my_cards(event):
    user_id = event.message.peer_id.user_id
    if not await is_expected_steps(user_id, [3011, 3010, 2011, 2010, 61, 62]):
        step = await _get_current_user_step(user_id)

        await update_data_events_db(user_id, "change_interests", {"step": step})

        if await get_code_fill_form(user_id) == -1:
            await event.client.send_message(event.chat_id,
                                            "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ò∫Ô∏è\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ /start", buttons=Button.clear())
            await update_data_events_db(user_id, "change_interests", {"step": -1, "error": "without users"})
        elif await get_code_fill_form(user_id) == -2:
            await update_data_events_db(user_id, "change_interests", {"step": -1, "error": "without_interests"})
            await event.client.send_message(event.chat_id, "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã. –°–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? ‚ò∫Ô∏è")
            await _update_current_user_step(user_id, 0)
            await begin(event)

        else:
            await _update_current_user_step(user_id, 2)
            await begin(event)
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="/level"))
async def get_my_cards(event):
    user_id = event.message.peer_id.user_id
    if not await is_expected_steps(user_id, [3011, 3010, 2011, 2010, 61, 62]):
        step = await _get_current_user_step(user_id)

        await update_data_events_db(user_id, "change_level", {"step": step})

        if await get_code_fill_form(user_id) == -1:
            await event.client.send_message(event.chat_id,
                                            "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ò∫Ô∏è\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ /start", buttons=Button.clear())
            await update_data_events_db(user_id, "change_interests", {"step": -1, "error": "without users"})
        elif await get_code_fill_form(user_id) == -2:
            await update_data_events_db(user_id, "change_interests", {"step": -1, "error": "without_interests"})
            await event.client.send_message(event.chat_id, "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã. –°–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? ‚ò∫Ô∏è")
            await _update_current_user_step(user_id, 0)
            await begin(event)
        else:
            await _update_current_user_step(user_id, 2)
            await confirmed(event)
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="/reviews"))
async def get_reviews(event):
    user_id = event.message.peer_id.user_id

    if not await is_expected_steps(user_id, [3011, 3010, 2011, 2010, 61, 62]):
        step = await _get_current_user_step(user_id)
        await _update_current_user_step(user_id, 898)
        await update_data_events_db(user_id, "reviews", {"step": step})
        await leave_feedback(event)
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="/fiton"))
async def get_fiton(event):
    """"""
    user_id = event.message.peer_id.user_id

    if user_id == test_user_id:
        chats = await get_user_for_notify_reviews_db()

        if chats:
            text = "–ü—Å—Å..–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º. –ë—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—à—å –æ—Ç–∑—ã–≤ üíú\n\n" \
                   "–ù–∞–ø–æ–º–Ω—é, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /reviews\n"
            for chat in chats:
                await event.client.send_message(chat, text, buttons=Button.clear())
            await update_data_events_db(user_id, "send_notify_reviews", {"step": -1, "data": chats})
        else:
            pass
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="/deloss"))
async def get_delos(event):
    """"""
    user_id = event.message.peer_id.user_id

    if user_id == test_user_id:
        data = await get_private_db()

        if data:
            total_users = data[0]
            users_ellie = data[1]
            users_cards = data[2]
            users_reviews = data[3]
            text = "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏\n\n–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: \n\n" \
                   f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n" \
                   f"–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —á–∞—Ç–æ–º: {users_ellie}\n" \
                   f"–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏: {users_cards}\n" \
                   f"–û—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤: {users_reviews}\n\n<3"
            await event.client.send_message(event.chat_id, text, buttons=Button.clear())
            await update_data_events_db(user_id, "download_stats", {"step": -1, "data": data})
        else:
            pass
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–ù–∞–∑–∞–¥"))
async def get_back(event):
    """"""
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [1]):
        await start(event)
    elif await is_expected_steps(user_id, [2]):
        await begin(event)
    elif await is_expected_steps(user_id, [3]):
        await confirmed(event)
    elif await is_expected_steps(user_id, [41, 42]):
        await choose_level(event)
    elif await is_expected_steps(user_id, [52]):
        await cards(event)
    elif await is_expected_steps(user_id, [6]):
        await start_chat(event)
    elif await is_expected_steps(user_id, [11]):
        await start(event)
    elif await is_expected_steps(user_id, [10]):
        await get_end(event)
    elif await is_expected_steps(user_id, [676]):
        await get_end(event)
    elif await is_expected_steps(user_id, [62]):
        await get_end(event)

    return


bot.run_until_disconnected()
