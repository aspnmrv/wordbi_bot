from telethon import events, Button

from bot.tools import get_keyboard, check_exist_img, create_img_card, is_expected_steps
from bot.db_tools import (
    _get_current_user_step,
    _update_current_user_step,
    _update_user_test_words,
    _get_user_test_words,
    _get_user_self_words
)
from bot.db import update_data_events_db, get_user_words_db
from paths import PATH_IMAGES, PATH_FONT
from bot.bot_instance import bot


@bot.on(events.NewMessage(pattern="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†"))
async def testing_words(event):
    async def send_test_word_message(word, step):
        if word is None:
            message = "–£—Ä–∞! –≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ, —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! " \
                      "üòª\n\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
            buttons = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
            file = None
            await update_data_events_db(user_id, "testing_complete", {"step": -1})
        else:
            message = ""
            buttons = [[Button.inline(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=56)]]
            file = f"{PATH_IMAGES}/{word.replace(' ', '')}_en.png"
            if not await check_exist_img(file):
                await create_img_card(word.replace(' ', '').lower(), file)

        await event.client.send_message(event.chat_id, message, buttons=buttons, file=file)
        if word:
            await _update_user_test_words(user_id, word)
        await _update_current_user_step(user_id, step)

    def get_next_test_word(current, words):
        if current in words:
            i = words.index(current)
            return words[i + 1] if i + 1 < len(words) else None
        return words[0]

    try:
        user_id = event.message.peer_id.user_id
    except AttributeError:
        user_id = event.original_update.user_id

    step = await _get_current_user_step(user_id)
    if await is_expected_steps(user_id, [50, 51, 2011, 3011, 2010, 3010]):
        words = await (get_user_words_db(user_id) if step in [50, 2011, 3011] else _get_user_self_words(user_id))
        if isinstance(words, tuple) and isinstance(words[0], list):
            words = words[0]

        if isinstance(words, list) and isinstance(words[0], list):
            words = words[0]

        current = await _get_user_test_words(user_id)

        if step not in [3011, 3010]:
            intro = "–ê —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–±—è! üòà \n\n" \
                    "–Ø –±—É–¥—É —Ç–µ–±–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ —Ç–≤–æ—è " \
                    "–∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, " \
                    "–∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã " \
                    "–∫–∞—Ä—Ç–æ—á–∫–∏ üòä\n\n" \
                    "–ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å —Å–ª–æ–≤–æ, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n" \
                    "–ê –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–µ—à—å –∏–ª–∏ –Ω–∞–¥–æ–µ—Å—Ç, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –ø–Ω–æ–ø–∫—É –ó–∞–≤–µ—Ä—à–∏—Ç—å"
            await event.client.send_message(event.chat_id, intro, buttons=await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
            next_word = words[0]
        else:
            next_word = get_next_test_word(current, words)

        next_step = 2011 if step in [50, 2011, 3011] else 2010
        await send_test_word_message(next_word, next_step)
        await update_data_events_db(user_id, "testing", {"step": step})
