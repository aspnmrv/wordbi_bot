from telethon import events, Button

from bot.tools import get_keyboard, build_img_cards
from bot.db_tools import (
    _update_user_self_words, _update_current_user_step,
    _update_user_words, _update_user_choose_topic
)
from bot.db import update_user_words_db, update_data_events_db, update_user_stat_category_words_db


async def finalize_cards_and_send_next_steps(event, user_id, card_words, topic, next_step, is_cut: bool = False):
    """"""
    await _update_user_self_words(user_id, card_words)
    fixed = {w.replace('/', ''): t.replace('/', '') for w, t in card_words.items()}
    await build_img_cards(fixed, user_id)
    await _update_user_words(user_id, "self", "", "en")
    await _update_user_choose_topic(user_id, "self")
    await update_user_words_db(user_id, fixed, topic)
    if not is_cut:
        await event.client.send_message(
            event.chat_id,
            "–ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ..\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–±–æ—Ä–∫–∏, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π",
            buttons=Button.clear()
        )
    else:
        await event.client.send_message(
            event.chat_id,
            "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –±—ã–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü—Ä–∏—à–ª–æ—Å—å –µ–≥–æ –Ω–µ–º–Ω–æ–≥–æ –æ–±—Ä–µ–∑–∞—Ç—å\n\n"
            "–ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ..\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–±–æ—Ä–∫–∏, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π",
            buttons=Button.clear()
        )
    await update_data_events_db(user_id, "cards_success", {"step": next_step})
    await _update_current_user_step(user_id, next_step)
    await update_user_stat_category_words_db(user_id, fixed, topic, is_system=False)


async def check_wrong_message(result):
    """"""

    if not result:
        return False
    if not isinstance(result, dict):
        return False

    if list(result.keys())[0] in (-1, -2, -3):
        return True
    else:
        return False


async def send_error_message(user_id, event, result):
    """"""
    if not result:
        return
    if not isinstance(result, dict):
        return

    is_wrong = await check_wrong_message(result)

    if is_wrong:
        type_error = list(result.keys())[0]
        if type_error == -1:
            error_message = "content"
            user_message = "–°—Ä–µ–¥–∏ —ç—Ç–∏—Ö —Å–ª–æ–≤ –µ—Å—Ç—å –≤–µ—Å—å–º–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ üòî. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.."
        elif type_error == -2:
            error_message = "too_much_words"
            user_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤ üòî. –ü–æ–ø—Ä–æ–±—É–π c –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –Ω–µ –±–æ–ª–µ–µ 30."
        elif type_error == -3:
            error_message = "other language"
            user_message = "–ö–∞–∂–µ—Ç—Å—è, —Å —Ç–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ —è –µ—â–µ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å üòî. –ò—Å–ø–æ–ª—å–∑—É–π EN, RU —Å–ª–æ–≤–∞."
        else:
            error_message = f"type_error_{type_error}"
            user_message = "–£–ø—Å..–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ú–µ–Ω—è —É–∂–µ —á–∏–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–ø–æ–∑–∂–µ üíú"

        keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
        await event.client.send_message(
            event.chat_id,
            user_message,
            buttons=keyboard
        )
        await update_data_events_db(user_id, "own_cards", {"step": -1, "error": error_message})
    else:
        return
