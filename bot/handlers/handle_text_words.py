import ast

from telethon import events
from telethon import events, Button
from bot.bot_instance import bot
from bot.handlers.common import (
    finalize_cards_and_send_next_steps,
    send_error_message
)
from bot.tools import (
    get_keyboard,
    build_img_cards,
    is_expected_steps,
    is_valid_word_list,
    is_simple_word_list,
    parse_word_list
)
from bot.db import (
    get_user_level_db, update_user_words_db, update_data_events_db,
    update_user_stat_category_words_db, increment_counter_and_check
)
from bot.ellie import get_cards_from_simple_list
from bot.decorators import limit_usage


@bot.on(events.NewMessage())
async def handle_custom_topic_input(event):
    user_id = event.message.peer_id.user_id
    message_text = event.message.message

    if not await is_expected_steps(user_id, [52]):
        return

    if message_text in (
        "Quiz me üìù",
        "–ü–æ–±–æ–ª—Ç–∞—Ç—å üíå",
        "–ó–∞–≤–µ—Ä—à–∏—Ç—å",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è üß†",
        "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ üß¨",
        "–ù–∞–∑–∞–¥",
        "/my_profile",
        "/my_cards",
        "/my_stat",
        "/reviews",
        "/start",
        "üëæ –ë–∞–∑–∞"
    ):
        return

    if event.message.file:
        return

    if not await is_valid_word_list(message_text) and not await is_simple_word_list(message_text):
        return

    if not await increment_counter_and_check(user_id, "handle_custom_topic_input", 40):
        await event.client.send_message(
            event.chat_id,
            "–û–≥–æ, –∫–∞–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ù–æ —è –Ω–µ —É—Å–ø–µ–≤–∞—é —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç–∞–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π üòî\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∑–∞–≤—Ç—Ä–∞ üíú"
        )
        return

    await event.client.send_message(event.chat_id, "–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤...", buttons=Button.clear())

    try:
        is_cut = False
        if await is_valid_word_list(message_text):
            lines = message_text.splitlines()
            if len(lines) > 35:
                lines = lines[:35]
                message_text = "\n".join(lines)
                is_cut = True

            card_words = await parse_word_list(message_text)

            if not card_words:
                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                await event.client.send_message(
                    event.chat_id,
                    "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ üòî\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üíú",
                    buttons=keyboard
                )
                await update_data_events_db(user_id, "cards_from_text_error", {"step": -1, "error": "wrong_format"})
                return

            if not isinstance(card_words, dict):
                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                await event.client.send_message(
                    event.chat_id,
                    "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ üòî\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üíú",
                    buttons=keyboard
                )
                await update_data_events_db(user_id, "cards_from_text_error", {"step": -1, "error": "wrong_format"})
                return

            await send_error_message(user_id, event, card_words)
            await finalize_cards_and_send_next_steps(event, user_id, card_words, "tmp349201", next_step=109, is_cut=is_cut)
        elif await is_simple_word_list(message_text):
            lines = message_text.splitlines()
            if len(lines) > 35:
                lines = lines[:35]
                message_text = "\n".join(lines)
                is_cut = True

            card_words = await get_cards_from_simple_list(user_id, message_text)
            if not card_words:
                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                await event.client.send_message(
                    event.chat_id,
                    "–ö–∞–∂–µ—Ç—Å—è, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã üòî\n\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã üíú",
                    buttons=keyboard
                )
                await update_data_events_db(user_id, "cards_from_list_error", {"step": -1, "error": "specific"})
                return

            card_words = ast.literal_eval(card_words)

            if not isinstance(card_words, dict):
                keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
                await event.client.send_message(
                    event.chat_id,
                    "–£–ø—Å..–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ú–µ–Ω—è —É–∂–µ —á–∏–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–ø–æ–∑–∂–µ üíú",
                    buttons=keyboard
                )
                await update_data_events_db(user_id, "cards_from_list_error", {"step": -1, "error": "api"})
                return

            await send_error_message(user_id, event, card_words)
            await finalize_cards_and_send_next_steps(event, user_id, card_words, "tmp349201", next_step=109, is_cut=is_cut)

    except Exception as e:
        keyboard = await get_keyboard(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
        await event.client.send_message(
            event.chat_id,
            "–£–ø—Å..–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ú–µ–Ω—è —É–∂–µ —á–∏–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–ø–æ–∑–∂–µ üíú",
            buttons=keyboard
        )
        await update_data_events_db(user_id, "cards_from_list_error", {"step": -1, "error": str(e)})
